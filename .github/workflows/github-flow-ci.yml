name: 🌿 GitHub Flow CI/CD Pipeline

# Triggers: PR to main (quality gates) + Push to main (deployment)
on:
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master]
  workflow_dispatch:

# Environment variables
env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

# Concurrent job management
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # QUALITY GATES - Executed on every PR
  # =============================================================================
  quality-gates:
    name: 🔍 Quality Gates & Static Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      # Checkout with full history for better analysis
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Python environment setup
      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Install dependencies
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy pytest pytest-cov bandit safety

      # Static analysis with Ruff (67+ rules)
      - name: 🔍 Ruff Static Analysis
        run: |
          echo "🔍 Running Ruff linting with 67+ rules..."
          ruff check . --output-format=github --statistics
          echo "💅 Running Ruff formatting check..."
          ruff format --check .

      # Type checking with MyPy
      - name: 🔬 MyPy Type Checking
        run: |
          echo "🔬 Running MyPy static type checking..."
          mypy . --show-error-codes --pretty

      # Security scanning
      - name: 🛡️ Security Analysis
        run: |
          echo "🛡️ Running Bandit security scan..."
          bandit -r . -f json -o bandit-report.json || true
          echo "📋 Running Safety dependency check..."
          safety check --json || true

      # Test suite execution
      - name: 🧪 Test Suite
        run: |
          echo "🧪 Running test suite with coverage..."
          pytest \
            --cov=app \
            --cov=services \
            --cov=repositories \
            --cov=models \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-report=xml \
            --cov-fail-under=80 \
            --tb=short \
            -v

      # Upload coverage reports
      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

      # Custom naming validation
      - name: 🏷️ Naming Conventions Check
        run: |
          echo "🏷️ Running custom naming validator..."
          python scripts/naming_validator.py

      # API endpoint validation
      - name: 🌐 API Validation
        run: |
          echo "🌐 Validating API endpoints..."
          python -c "
          from app.routes.api import router
          print(f'✅ Validated {len(router.routes)} API endpoints')
          for route in router.routes:
              print(f'  - {route.methods} {route.path}')
          "

      # Documentation check
      - name: 📚 Documentation Check
        run: |
          echo "📚 Checking documentation completeness..."
          find . -name "*.md" -exec echo "✅ {}" \;
          python -c "
          import os
          required_docs = ['README.md', 'docs/API_REFERENCE.md', 'docs/STATIC_ANALYSIS.md']
          missing = [doc for doc in required_docs if not os.path.exists(doc)]
          if missing:
              print(f'❌ Missing docs: {missing}')
              exit(1)
          print('✅ All required documentation present')
          "

  # =============================================================================
  # BUILD & TEST MATRIX - Multiple environments
  # =============================================================================
  build-matrix:
    name: 🏗️ Build Matrix
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: 🧪 Quick Test Suite
        run: |
          pip install -r requirements.txt
          python -m pytest tests/ -x --tb=short

  # =============================================================================
  # INTEGRATION TESTS - Real environment simulation
  # =============================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mqtt:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883

    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          pip install -r requirements.txt
          
      - name: 🗄️ Setup Test Database
        run: |
          export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb"
          python tools/init_timescaledb.py
          
      - name: 🔗 Integration Test Suite
        env:
          DATABASE_URL: "postgresql://testuser:testpass@localhost:5432/testdb"
          MQTT_BROKER_HOST: localhost
          MQTT_BROKER_PORT: 1883
        run: |
          pytest tests/integration/ -v --tb=short

  # =============================================================================
  # DEPLOYMENT - Only on push to main
  # =============================================================================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality-gates, integration-tests]
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying SolarGrid Monitor to production..."
          # Add your deployment commands here
          # docker-compose up -d
          # kubectl apply -f k8s/
          # helm upgrade solargrid ./charts/
          
      - name: 🏥 Health Check
        run: |
          echo "🏥 Running production health checks..."
          # Add health check commands
          # curl -f $PRODUCTION_URL/health
          # kubectl get pods
          
      - name: 📊 Deployment Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 SolarGrid Monitor deployed successfully!
            📊 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            🌐 Environment: Production
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # ROLLBACK - Manual trigger for emergencies
  # =============================================================================
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: 🔄 Rollback to Previous Version
        run: |
          echo "🔄 Emergency rollback initiated..."
          # Add rollback logic
          # docker-compose down && docker-compose up -d --scale app=0
          # kubectl rollout undo deployment/solargrid-monitor
          
      - name: 🚨 Rollback Notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#alerts'
          text: |
            🚨 EMERGENCY ROLLBACK EXECUTED
            🔄 SolarGrid Monitor rolled back
            👤 Initiated by: ${{ github.actor }}
            🕐 Time: ${{ github.event.created_at }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # SECURITY SCAN - Deep security analysis
  # =============================================================================
  security-scan:
    name: 🛡️ Advanced Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 🛡️ Run Snyk Security Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python
          
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3